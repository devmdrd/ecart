<style>
  .scrollable-products {
    max-height: 250px;
    overflow-y: auto;
    padding-right: 4px;
    scroll-behavior: smooth;
  }

  .scrollable-products::-webkit-scrollbar {
    width: 6px;
  }

  .scrollable-products::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  .scrollable-products::-webkit-scrollbar-thumb {
    background: #c1c1c1;
  }

  .scrollable-products::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }

  .StripeElement {
    box-sizing: border-box;
    height: 40px;
    padding: 10px 12px;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    background-color: white;
  }

  .StripeElement--focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
    border-color: #000;
  }

  .StripeElement--invalid {
    border-color: #ef4444;
  }

  .StripeElement--webkit-autofill {
    background-color: #fefde5 !important;
  }
</style>

<div class="container mx-auto px-4 py-8 max-w-6xl">
  <h1 class="text-2xl font-bold text-gray-900 mb-6">Complete your order</h1>
  <div class="flex flex-col lg:flex-row gap-8">
    <div class="lg:w-2/3">
      <div class="bg-white p-6 rounded-lg shadow-sm mb-6">
        <h2 class="text-xl font-semibold mb-4">Shipping Address</h2>

        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="saved-addresses">Saved Addresses</label>
          <select id="saved-addresses" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black">
            <option value="">Select an address</option>
            <% if (addresses && addresses.length > 0) { %> 
              <% addresses.forEach(address => { %>
                <option value="<%= address._id %>">
                  <%= address.fullName %>: <%= address.houseNameOrNo %>, <%= address.street %>, <%= address.city %>
                </option>
              <% }) %> 
            <% } else { %>
              <option disabled>No saved addresses found.</option>
            <% } %>
          </select>
        </div>

        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="full-name">Full Name</label>
          <input type="text" id="full-name" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
        </div>

        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label class="block text-gray-700 mb-2" for="phone">Phone</label>
            <input type="tel" id="phone" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
          </div>
          <div>
            <label class="block text-gray-700 mb-2" for="house-name-or-no">House Name or Number</label>
            <input type="text" id="house-name-or-no" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
          </div>
        </div>

        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="street">Street</label>
          <input type="text" id="street" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
        </div>

        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label class="block text-gray-700 mb-2" for="city">City</label>
            <input type="text" id="city" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
          </div>
          <div>
            <label class="block text-gray-700 mb-2" for="state">State</label>
            <input type="text" id="state" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
          </div>
        </div>

        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label class="block text-gray-700 mb-2" for="postal-code">Postal Code</label>
            <input type="text" id="postal-code" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
          </div>
          <div>
            <label class="block text-gray-700 mb-2" for="country">Country</label>
            <input type="text" id="country" class="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black" required />
          </div>
        </div>
        <div class="mb-4">
          <button onclick="saveAddress()" class="bg-black text-white p-2 rounded hover:bg-gray-800">Save Address</button>
        </div>
      </div>
    </div>

    <div class="lg:w-1/3">
      <div class="bg-white p-6 rounded-lg shadow-sm sticky top-4">
        <h2 class="text-xl font-semibold mb-4">Order Summary</h2>

        <div class="scrollable-products mb-6">
          <div class="space-y-3">
            <% if (cartItems?.length) { %>
              <% cartItems.forEach(item => { %>
                <div class="flex items-start p-3 border rounded-lg hover:bg-gray-50 transition-colors">
                  <div class="w-16 h-16 bg-gray-100 rounded-lg mr-3 flex items-center justify-center overflow-hidden">
                    <% if (item.productImage) { %>
                      <img src="<%= item.productImage %>" alt="<%= item.productName %>" class="object-cover w-full h-full" />
                    <% } else { %>
                      <span class="text-xs text-gray-500">No Image</span>
                    <% } %>
                  </div>

                  <div class="flex-1">
                    <div class="flex justify-between items-start">
                      <h3 class="font-medium text-sm"><%= item.productName %></h3>
                    </div>

                    <div class="flex flex-wrap items-center gap-2 mt-1">
                      <% item.attributes.forEach(value => { 
                          const isColor = /^#([0-9A-F]{3}){1,2}$/i.test(value) || /(red|blue|green|yellow|black|white|gray|grey|orange|pink)/i.test(value);
                          if (isColor) { %>
                        <div class="w-4 h-4 rounded-full border border-gray-200" style="background-color: <%= value %>" title="<%= value %>"></div>
                      <% } else {
                          const hue = Math.floor(Math.random() * 360); %>
                        <span class="text-xs px-2 py-0.5 rounded-full" style="background-color: hsl(<%= hue %>, 80%, 90%); border: 1px solid hsl(<%= hue %>, 80%, 70%);">
                          <%= value %>
                        </span>
                      <% } %>
                    <% }) %>
                    </div>

                    <p class="font-medium text-sm">₹<%= item.discountPrice.toFixed(2) %></p>
                    <p class="text-xs text-gray-500 mt-1">Qty: <%= item.qty %></p>
                  </div>
                </div>
              <% }) %>
            <% } else { %>
              <p class="text-gray-500 text-sm py-4 text-center">Your cart is empty</p>
            <% } %>
          </div>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Apply Coupon</h3>
          <form id="couponForm" class="flex">
            <input
              name="coupon"
              id="couponCode"
              type="text"
              placeholder="Enter coupon code"
              class="flex-1 p-2 border border-gray-300 rounded-l focus:outline-none focus:ring-1 focus:ring-black"
              value="<%= appliedCoupon ? appliedCoupon.code : '' %>"
            />
            <button type="button" id="applyCouponBtn" class="bg-black text-white px-4 rounded-r hover:bg-gray-800">Apply</button>
          </form>
          <% if (couponMessage) { %>
            <div class="text-green-800 text-sm rounded"><%= couponMessage %></div>
          <% } %> 
          <% if (availableCoupons && availableCoupons.length > 0) { %>
            <div class="flex flex-wrap gap-1 bg-gray-100 mt-2">
              <% availableCoupons.forEach((coupon) => { %>
                <span class="inline-flex items-center bg-blue-100 text-blue-700 px-1 text-[10px] font-medium rounded-full shadow-sm">
                  <%= coupon.code %> - <%= coupon.discount %>₹ off
                </span>
              <% }) %>
            </div>
          <% } %>
        </div>

        <div class="space-y-3 mb-6">
          <div class="flex justify-between">
            <span class="text-gray-600">Subtotal</span>
            <span>₹<%= subtotal.toFixed(2) %></span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600">Shipping</span>
            <span>₹0.00</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600">Discount</span>
            <span class="text-green-600">- ₹<%= discount.toFixed(2) %></span>
          </div>
          <div class="flex justify-between border-t border-gray-200 pt-3 mt-3">
            <span class="font-semibold">Total</span>
            <span class="font-semibold">₹<%= total.toFixed(2) %></span>
          </div>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-4">Payment Method</h3>
          <div class="space-y-3 mb-4">
            <label class="flex items-center p-3 border border-gray-200 rounded-lg cursor-pointer hover:border-blue-500 transition-colors">
              <input type="radio" name="payment" id="stripe" value="card" class="mr-3 h-5 w-5" checked />
              <div class="flex items-center gap-2">
                <i class="fas fa-credit-card text-blue-600 text-xl"></i>
                <span>Credit/Debit Card</span>
              </div>
            </label>
            
            <div id="card-details" class="mt-4 pl-8">
              <div id="card-element" class="StripeElement"></div>
              <div id="card-errors" class="text-red-500 mt-2 text-sm" role="alert"></div>
            </div>

            <label class="flex items-center p-3 border border-gray-200 rounded-lg cursor-pointer hover:border-green-500 transition-colors">
              <input type="radio" name="payment" id="cod" value="cod" class="mr-3 h-5 w-5" />
              <div class="flex items-center gap-2">
                <i class="fas fa-money-bill-wave text-green-600 text-xl"></i>
                <span>Cash on Delivery</span>
              </div>
            </label>
          </div>
        </div>

        <button id="submit-button" class="w-full bg-black text-white py-3 rounded-lg font-medium hover:bg-gray-800 transition duration-200">
          Complete Order
        </button>
      </div>
    </div>
  </div>
</div>

<div id="toast" class="fixed bottom-6 right-6 bg-gray-800 text-white py-3 px-6 rounded-lg shadow-lg opacity-0 transition-opacity duration-500 pointer-events-none"></div>

<script src="https://js.stripe.com/v3/"></script>
<script>
  const stripe = Stripe("<%= process.env.STRIPE_PUBLISHABLE_KEY %>");
  const elements = stripe.elements();
  let cardElement = null;

  function initializeStripeElements() {
    if (!cardElement) {
      cardElement = elements.create('card', {
        style: {
          base: {
            fontSize: '16px',
            color: '#424770',
            '::placeholder': {
              color: '#aab7c4',
            },
          },
          invalid: {
            color: '#ef4444',
          },
        },
      });
      cardElement.mount('#card-element');
      
      cardElement.addEventListener('change', ({error}) => {
        const displayError = document.getElementById('card-errors');
        displayError.textContent = error ? error.message : '';
      });
    }
  }

  document.getElementById('stripe').addEventListener('change', function() {
    if (this.checked) {
      initializeStripeElements();
      document.getElementById('card-details').classList.remove('hidden');
    }
  });

  document.getElementById('cod').addEventListener('change', function() {
    if (this.checked) {
      document.getElementById('card-details').classList.add('hidden');
    }
  });

  function showToast(message, isSuccess = true) {
    const toast = document.getElementById("toast");
    toast.textContent = message;
    toast.className = `fixed bottom-6 right-6 ${isSuccess ? 'bg-green-600' : 'bg-red-600'} text-white py-3 px-6 rounded-lg shadow-lg opacity-100 transition-opacity duration-500 pointer-events-none`;

    setTimeout(() => {
      toast.classList.remove("opacity-100");
      toast.classList.add("opacity-0");
    }, 3000);
  }

  document.getElementById('applyCouponBtn').addEventListener('click', function() {
    const couponCode = document.getElementById('couponCode').value.trim();
    if (couponCode) {
      const currentUrl = new URL(window.location.href);
      currentUrl.searchParams.set('coupon', couponCode);
      window.location.href = currentUrl.toString();
    }
  });

  async function saveAddress() {
    const fullName = document.getElementById("full-name").value;
    const houseNameOrNo = document.getElementById("house-name-or-no").value;
    const street = document.getElementById("street").value;
    const city = document.getElementById("city").value;
    const state = document.getElementById("state").value;
    const country = document.getElementById("country").value;
    const postalCode = document.getElementById("postal-code").value;
    const phone = document.getElementById("phone").value;

    if (!fullName || !houseNameOrNo || !street || !city || !postalCode || !phone) {
      showToast("Please fill in all required fields", false);
      return;
    }

    try {
      const response = await fetch("/address", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ fullName, houseNameOrNo, street, city, state, postalCode, country, phone }),
      });

      const data = await response.json();
      if (data.success) {
        showToast("Address added successfully");
        setTimeout(() => window.location.reload(), 1500);
      } else {
        showToast(data.message || "Failed to add address", false);
      }
    } catch (error) {
      showToast("An error occurred while saving the address", false);
    }
  }

  document.getElementById('submit-button').addEventListener('click', async (e) => {
    e.preventDefault();
    const addressId = document.getElementById("saved-addresses").value;
    if (!addressId) {
      showToast("Please select an address", false);
      return;
    }

    const paymentMethod = document.querySelector('input[name="payment"]:checked').id;
    const totalAmount = <%= total.toFixed(2) %>;
    const submitButton = document.getElementById('submit-button');
    submitButton.disabled = true;
    submitButton.textContent = 'Processing...';

    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('productId');
    const skuId = urlParams.get('skuId');
    const quantity = urlParams.get('quantity');

    try {
      if (paymentMethod === 'cod') {
        const response = await fetch('/complete-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            paymentMethod: 'COD',
            amount: totalAmount,
            addressId: addressId,
            items: { productId, skuId, quantity }
          }),
        });

        const data = await response.json();
        if (data.success) {
          window.location.href = "/order-success";
        } else {
          showToast(data.message || "Failed to place order", false);
        }
      } else {
        initializeStripeElements();
        const response = await fetch('/create-payment-intent', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ amount: totalAmount }),
        });
        const { clientSecret } = await response.json();

        const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
          payment_method: {
            card: cardElement,
            billing_details: {
              name: document.getElementById('full-name').value,
              phone: document.getElementById('phone').value,
            }
          }
        });

        if (error) {
          showToast(error.message, false);
        } else if (paymentIntent.status === 'succeeded') {
          const orderResponse = await fetch('/complete-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              paymentMethod: 'ONLINE',
              paymentIntentId: paymentIntent.id,
              amount: totalAmount,
              addressId,
              items: { productId, skuId, quantity }
            }),
          });

          const data = await orderResponse.json();
          if (data.success) {
            window.location.href = "/order-success";
          } else {
            showToast(data.message || "Failed to place order", false);
          }
        }
      }
    } catch (error) {
      showToast("Error processing payment", false);
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = 'Complete Order';
    }
  });

  initializeStripeElements();
</script>