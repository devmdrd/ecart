<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
  <div class="flex flex-col md:flex-row gap-6">
    <%- include('../../layouts/partials/accounts-sidebar') %>

    <div class="flex-1 space-y-6">
      <div class="flex justify-end">
        <button id="addAddressBtn" class="flex items-center space-x-2 px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          <span class="text-sm font-medium">Add New Address</span>
        </button>
      </div>

      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">Saved Addresses</h3>
        </div>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="addressesContainer">
            <% if (addresses.length === 0) { %>
              <div class="col-span-full py-12 flex flex-col items-center justify-center text-gray-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <p class="text-sm">No addresses saved yet.</p>
              </div>
            <% } else { %>
              <% addresses.forEach(address => { %>
                <div class="border border-gray-200 rounded-lg p-4 space-y-2 text-sm text-gray-700 hover:border-black transition-colors">
                  <input type="hidden" name="addressId" id="addressId" value="<%= address._id %>">
                  <div class="flex justify-between items-start">
                    <p class="font-medium text-black text-base"><%= address.fullName %></p>
                  </div>
                  <div class="space-y-1">
                    <p><%= address.houseNameOrNo %>, <%= address.street %></p>
                    <p><%= address.city %>, <%= address.state %> - <%= address.postalCode %></p>
                    <p class="text-gray-600"><%= address.phone %></p>
                  </div>
                  <div class="flex space-x-3 pt-2">
                    <button class="edit-address-btn text-sm text-black hover:text-gray-600 transition-colors" data-id="<%= address.id %>">Edit</button>
                    <button class="delete-address-btn text-sm text-black hover:text-gray-600 transition-colors" data-id="<%= address.id %>">Delete</button>
                  </div>
                </div>
              <% }) %>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="addressModal" class="fixed z-50 inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-lg mx-4">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-900" id="modalTitle">Add New Address</h3>
          <button id="closeModalBtn" class="text-gray-400 hover:text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <form id="addressForm" class="space-y-4">
          <input type="hidden" id="addressId" />
          <div class="space-y-4">
            <div>
              <input type="text" id="fullName" name="fullName" placeholder="Full Name" required
                class="w-full border border-gray-300 rounded-md px-4 py-2.5 focus:ring-black focus:border-black placeholder-gray-400" />
            </div>
            <div>
              <input type="text" id="houseNameOrNo" name="houseNameOrNo" placeholder="House Name / Number" required
                class="w-full border border-gray-300 rounded-md px-4 py-2.5 focus:ring-black focus:border-black placeholder-gray-400" />
            </div>
            <div>
              <input type="text" id="street" name="street" placeholder="Street" required
                class="w-full border border-gray-300 rounded-md px-4 py-2.5 focus:ring-black focus:border-black placeholder-gray-400" />
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <input type="text" id="city" name="city" placeholder="City" required
                  class="w-full border border-gray-300 rounded-md px-4 py-2.5 focus:ring-black focus:border-black placeholder-gray-400" />
              </div>
              <div>
                <input type="text" id="state" name="state" placeholder="State / Province" required
                  class="w-full border border-gray-300 rounded-md px-4 py-2.5 focus:ring-black focus:border-black placeholder-gray-400" />
              </div>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <input type="text" id="postalCode" name="postalCode" placeholder="Postal Code" required
                  class="w-full border border-gray-300 rounded-md px-4 py-2.5 focus:ring-black focus:border-black placeholder-gray-400" />
              </div>
              <div>
                <input type="tel" id="phone" name="phone" placeholder="Phone" required
                  class="w-full border border-gray-300 rounded-md px-4 py-2.5 focus:ring-black focus:border-black placeholder-gray-400" />
              </div>
            </div>
          </div>
          <div class="flex justify-end gap-3 pt-4">
            <button type="button" id="cancelBtn"
              class="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">Cancel</button>
            <button type="submit" id="submitBtn"
              class="px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800 transition-colors">Save Address</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <div id="deleteModal" class="fixed z-50 inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-900">Confirm Deletion</h3>
          <button id="closeDeleteModalBtn" class="text-gray-400 hover:text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <p class="text-gray-700 mb-6">Are you sure you want to delete this address? This action cannot be undone.</p>
        <div class="flex justify-end gap-3">
          <button type="button" id="cancelDeleteBtn"
            class="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">Cancel</button>
          <button type="button" id="confirmDeleteBtn"
            class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">Delete</button>
        </div>
        <input type="hidden" id="addressToDeleteId" />
      </div>
    </div>
  </div>

  <div id="toast" class="fixed bottom-6 right-6 bg-gray-900 text-white py-3 px-6 rounded-lg shadow-lg opacity-0 transition-opacity duration-300 pointer-events-none flex items-center space-x-2">
    <svg id="toast-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
    </svg>
    <span id="toast-message"></span>
  </div>
</div>

<script>
  const addressModal = document.getElementById('addressModal');
  const addressForm = document.getElementById('addressForm');
  const addAddressBtn = document.getElementById('addAddressBtn');
  const closeModalBtn = document.getElementById('closeModalBtn');
  const cancelBtn = document.getElementById('cancelBtn');
  const modalTitle = document.getElementById('modalTitle');
  const addressIdField = document.getElementById('addressId');
  const submitBtn = document.getElementById('submitBtn');
  
  const deleteModal = document.getElementById('deleteModal');
  const closeDeleteModalBtn = document.getElementById('closeDeleteModalBtn');
  const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
  const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
  const addressToDeleteId = document.getElementById('addressToDeleteId');

  document.addEventListener('DOMContentLoaded', () => {
    setupEventListeners();
  });
  
  function setupEventListeners() {
    addAddressBtn.addEventListener('click', () => {
      openAddressModal();
    });
    
    closeModalBtn.addEventListener('click', () => {
      closeAddressModal();
    });
    
    cancelBtn.addEventListener('click', (e) => {
      e.preventDefault();
      closeAddressModal();
    });
    
    addressForm.addEventListener('submit', (e) => {
      e.preventDefault();
      saveAddress();
    });
    
    closeDeleteModalBtn.addEventListener('click', () => {
      deleteModal.classList.add('hidden');
    });
    
    cancelDeleteBtn.addEventListener('click', () => {
      deleteModal.classList.add('hidden');
    });
    
    confirmDeleteBtn.addEventListener('click', () => {
      deleteAddress();
    });
    
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('delete-address-btn')) {
        const addressId = e.target.getAttribute('data-id');
        openDeleteModal(addressId);
      }
      
      if (e.target.classList.contains('edit-address-btn')) {
        const addressId = e.target.getAttribute('data-id');
        editAddress(addressId);
      }
    });
  }
  
  function showToast(message, isSuccess = true) {
    const toast = document.getElementById("toast");
    const toastIcon = document.getElementById("toast-icon");
    const toastMessage = document.getElementById("toast-message");
    
    toastMessage.textContent = message;
    toast.className = `fixed bottom-6 right-6 ${isSuccess ? 'bg-gray-900' : 'bg-red-600'} text-white py-3 px-6 rounded-lg shadow-lg opacity-100 transition-opacity duration-300 pointer-events-none flex items-center space-x-2`;
    
    if (isSuccess) {
      toastIcon.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />';
    } else {
      toastIcon.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />';
    }

    setTimeout(() => {
      toast.classList.remove("opacity-100");
      toast.classList.add("opacity-0");
    }, 3000);
  }

  function openAddressModal() {
    modalTitle.textContent = "Add New Address";
    addressForm.reset();
    addressIdField.value = '';
    addressModal.classList.remove('hidden');
    addressModal.classList.add('flex');
    resetFormValidation();
  }

  function closeAddressModal() {
    addressModal.classList.remove('flex');
    addressModal.classList.add('hidden');
  }

  function openDeleteModal(addressId) {
    addressToDeleteId.value = addressId;
    deleteModal.classList.remove('hidden');
    deleteModal.classList.add('flex');
  }

  function resetFormValidation() {
    const inputs = addressForm.querySelectorAll('input[required]');
    inputs.forEach(input => {
      input.classList.remove('border-red-500');
    });
  }

  async function editAddress(addressId) {
    try {
      const response = await fetch(`/address/${addressId}`);
      if (!response.ok) throw new Error('Failed to fetch addresses');
      
      const data = await response.json();
      const address = data.address;   
      
      if (address) {
        modalTitle.textContent = "Edit Address";
        addressIdField.value = address.id;
        document.getElementById('fullName').value = address.fullName || '';
        document.getElementById('houseNameOrNo').value = address.houseNameOrNo || '';
        document.getElementById('street').value = address.street || '';
        document.getElementById('city').value = address.city || '';
        document.getElementById('state').value = address.state || '';
        document.getElementById('postalCode').value = address.postalCode || '';
        document.getElementById('phone').value = address.phone || '';
        
        addressModal.classList.remove('hidden');
        addressModal.classList.add('flex');
      }
    } catch (error) {
      console.error('Error fetching address:', error);
      showToast("Failed to fetch address details", false);
    }
  }

  async function saveAddress() {
    const requiredFields = ['fullName', 'houseNameOrNo', 'street', 'city', 'state', 'postalCode', 'phone'];
    let isValid = true;
    
    requiredFields.forEach(field => {
      const element = document.getElementById(field);
      if (!element.value.trim()) {
        element.classList.add('border-red-500');
        isValid = false;
      } else {
        element.classList.remove('border-red-500');
      }
    });
    
    if (!isValid) {
      showToast("Please fill all required fields", false);
      return;
    }

    const addressId = addressIdField.value;
    const isEdit = !!addressId;
    
    const addressData = {
      fullName: document.getElementById('fullName').value.trim(),
      houseNameOrNo: document.getElementById('houseNameOrNo').value.trim(),
      street: document.getElementById('street').value.trim(),
      city: document.getElementById('city').value.trim(),
      state: document.getElementById('state').value.trim(),
      postalCode: document.getElementById('postalCode').value.trim(),
      phone: document.getElementById('phone').value.trim()
    };

    if (isEdit) {
      addressData._id = addressId; 
    }

    try {
      submitBtn.disabled = true;
      submitBtn.innerHTML = 'Saving...';
      
      let response;
      if (isEdit) {
        response = await fetch(`/address`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(addressData)
        });
      } else {
        response = await fetch('/address', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(addressData)
        });
      }

      if (!response.ok) throw new Error('Failed to save address');

      const result = await response.json();
      showToast(isEdit ? "Address updated successfully" : "Address added successfully");
      
      window.location.reload();
    } catch (error) {
      console.error('Error saving address:', error);
      showToast("Failed to save address", false);
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = 'Save Address';
    }
  }

  async function deleteAddress() {
    const addressId = addressToDeleteId.value;
    
    try {
      confirmDeleteBtn.disabled = true;
      confirmDeleteBtn.innerHTML = 'Deleting...';
      
      const response = await fetch(`/address/${addressId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) throw new Error('Failed to delete address');

      showToast("Address deleted successfully");
      
      window.location.reload();
    } catch (error) {
      console.error('Error deleting address:', error);
      showToast("Failed to delete address", false);
    } finally {
      confirmDeleteBtn.disabled = false;
      confirmDeleteBtn.innerHTML = 'Delete';
      deleteModal.classList.add('hidden');
    }
  }
</script>