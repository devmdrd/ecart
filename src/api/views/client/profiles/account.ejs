<!-- Account Container -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <div class="flex flex-col md:flex-row gap-8">
    <!-- Sidebar Navigation -->
    <div class="w-full md:w-64">
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div class="p-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">My Account</h3>
        </div>
        <nav class="space-y-1 p-2">
          <a href="#dashboard" id="dashboardTab" onclick="showTab('dashboard')" class="flex items-center space-x-3 px-3 py-2 bg-gray-100 text-black font-medium rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
            </svg>
            <span>Dashboard</span>
          </a>
          <a href="#orders" id="ordersTab" onclick="showTab('orders')" class="flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-50 hover:text-black rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clip-rule="evenodd" />
            </svg>
            <span>Orders</span>
          </a>
          <a href="#addresses" id="addressesTab" onclick="showTab('addresses')" class="flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-50 hover:text-black rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
            </svg>
            <span>Addresses</span>
          </a>
          <a href="/logout" class="flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-50 hover:text-black rounded-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
            </svg>
            <span>Logout</span>
          </a>
        </nav>
      </div>
    </div>

    <!-- Main Content -->
    <div class="flex-1">
      <!-- Dashboard Tab Content -->
      <div id="dashboardContent" class="space-y-6">
        <!-- Profile Section -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Profile Information</h3>
            <p class="mt-1 text-sm text-gray-500">Update your account's profile information and email address.</p>
          </div>
          <div class="p-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
              <!-- Profile Picture Section -->
              <div class="flex justify-center items-center flex-col">
                <div class="relative">
                  <img id="imagePreview" class="h-32 w-32 rounded-full object-cover border-4 border-gray-200 shadow-lg" src="" alt="Profile picture">
                  <label for="new-image" class="absolute bottom-0 right-0 bg-white rounded-full p-2 border-2 border-gray-300 cursor-pointer shadow-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M4 5a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V7a2 2 0 00-2-2h-1.586a1 1 0 01-.707-.293l-1.121-1.121A2 2 0 0011.172 3H8.828a2 2 0 00-1.414.586L6.293 4.707A1 1 0 015.586 5H4zm6 9a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
                    </svg>
                    <input id="new-image" class="hidden" type="file" accept="image/*" name="image" onchange="displayImage(this)">
                  </label>
                </div>
                <h4 class="font-semibold text-xl text-gray-900 mt-4" id="profileName">Loading...</h4>
                <p class="text-sm text-gray-500" id="memberSince">Member since</p>
              </div>
          
              <!-- Account Details Section -->
              <div class="space-y-6">
                <form id="profileForm">
                  <div>
                    <label for="name" class="block text-sm font-medium text-gray-700">Full Name</label>
                    <input type="text" id="name" name="name" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:outline-none focus:ring-black focus:border-black sm:text-sm">
                  </div>
                  <div>
                    <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                    <input type="text" id="username" name="username" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:outline-none focus:ring-black focus:border-black sm:text-sm">
                  </div>
                  <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
                    <input type="email" id="email" name="email" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:outline-none focus:ring-black focus:border-black sm:text-sm">
                  </div>
                  <div>
                    <label for="phone" class="block text-sm font-medium text-gray-700">Phone Number</label>
                    <input type="tel" id="phone" name="phone" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-3 px-4 focus:outline-none focus:ring-black focus:border-black sm:text-sm">
                  </div>
                </form>
              </div>
            </div>
          
            <!-- Save Changes Button -->
            <div class="flex justify-center mt-8">
              <button type="button" onclick="updateProfile()" class="px-6 py-2 bg-black text-white rounded-full hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black">
                Save Changes
              </button>
            </div>
          </div>          
        </div>
      </div>

      <!-- Orders Tab Content -->
      <div id="ordersContent" class="space-y-6 hidden">
        <!-- Orders Section -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Order History</h3>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200" id="ordersTableBody">
                <tr>
                  <td colspan="5" class="px-6 py-4 text-center text-gray-500">Loading orders...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Order Details Modal -->
        <div id="orderModal" class="fixed inset-0 z-50 hidden justify-center items-center bg-gray-900 bg-opacity-50">
          <div class="bg-white rounded-lg shadow-lg w-full max-w-4xl p-6 mx-4">
            <div class="flex justify-between items-center">
              <h3 class="text-lg font-medium text-gray-900">Order Details</h3>
              <button id="closeModal" class="text-gray-500 hover:text-gray-800 text-2xl">&times;</button>
            </div>
            <div class="mt-6 grid grid-cols-1 lg:grid-cols-2 gap-8">
              <!-- Order Summary -->
              <div>
                <h4 class="text-lg font-medium text-gray-900 mb-4">Order Summary</h4>
                <div class="space-y-2">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Order ID:</span>
                    <span class="font-medium" id="modalOrderId">#ORD-123456</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Date:</span>
                    <span id="modalOrderDate">May 15, 2023</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Status:</span>
                    <span id="modalOrderStatus" class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Delivered</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Payment Method:</span>
                    <span id="modalPaymentMethod">Credit Card</span>
                  </div>
                  <div class="flex justify-between border-t border-gray-200 pt-2 mt-2">
                    <span class="text-gray-600 font-medium">Total:</span>
                    <span class="font-medium" id="modalOrderTotal">$125.99</span>
                  </div>
                </div>
                
                <!-- Shipping Information -->
                <h4 class="text-lg font-medium text-gray-900 mt-6 mb-4">Shipping Information</h4>
                <address class="not-italic text-gray-600" id="modalShippingAddress">
                  <p>Loading...</p>
                </address>
              </div>
              
              <!-- Products List -->
              <div>
                <h4 class="text-lg font-medium text-gray-900 mb-4">Products</h4>
                <div id="productList" class="space-y-4">
                  <div class="animate-pulse flex space-x-4">
                    <div class="rounded-full bg-gray-200 h-20 w-20"></div>
                    <div class="flex-1 space-y-4 py-1">
                      <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                      <div class="space-y-2">
                        <div class="h-4 bg-gray-200 rounded"></div>
                        <div class="h-4 bg-gray-200 rounded w-5/6"></div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Order Tracking -->
                <h4 class="text-lg font-medium text-gray-900 mt-6 mb-4">Order Tracking</h4>
                <div class="space-y-4" id="orderTracking">
                  <div class="flex items-start">
                    <div class="flex-shrink-0 mt-1">
                      <div class="w-6 h-6 flex items-center justify-center bg-gray-200 rounded-full"></div>
                    </div>
                    <div class="ml-3">
                      <p class="text-sm font-medium text-gray-900">Loading...</p>
                      <p class="text-sm text-gray-500">Loading...</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Addresses Tab Content -->
      <div id="addressesContent" class="space-y-6 hidden">
        <!-- Add New Address Button -->
        <div class="flex justify-end">
          <button onclick="openAddressModal()" class="flex items-center space-x-2 px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            <span class="text-sm font-medium">Add New Address</span>
          </button>
        </div>
      
        <!-- Address Section -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Saved Addresses</h3>
          </div>
          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="addressesContainer">
              <div class="border border-gray-200 rounded-lg p-4">
                <div class="animate-pulse space-y-4">
                  <div class="h-4 bg-gray-200 rounded w-1/4"></div>
                  <div class="h-4 bg-gray-200 rounded"></div>
                  <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                  <div class="h-4 bg-gray-200 rounded w-2/3"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Address Modal -->
<div id="addressModal" class="fixed z-10 inset-0 overflow-y-auto hidden">
  <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div class="fixed inset-0 transition-opacity" aria-hidden="true">
      <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>
    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
    <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4" id="modalTitle">Add New Address</h3>
        <form id="addressForm">
          <input type="hidden" id="addressId">
          <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
            <div class="sm:col-span-6">
              <label for="fullName" class="block text-sm font-medium text-gray-700">Full Name</label>
              <input type="text" name="fullName" id="fullName" class="mt-1 focus:ring-black focus:border-black block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-3">
            </div>
            <div class="sm:col-span-6">
              <label for="addressLine1" class="block text-sm font-medium text-gray-700">Address Line 1</label>
              <input type="text" name="addressLine1" id="addressLine1" class="mt-1 focus:ring-black focus:border-black block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-3">
            </div>
            <div class="sm:col-span-6">
              <label for="addressLine2" class="block text-sm font-medium text-gray-700">Address Line 2</label>
              <input type="text" name="addressLine2" id="addressLine2" class="mt-1 focus:ring-black focus:border-black block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-3">
            </div>
            <div class="sm:col-span-3">
              <label for="city" class="block text-sm font-medium text-gray-700">City</label>
              <input type="text" name="city" id="city" class="mt-1 focus:ring-black focus:border-black block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-3">
            </div>
            <div class="sm:col-span-3">
              <label for="state" class="block text-sm font-medium text-gray-700">State/Province</label>
              <input type="text" name="state" id="state" class="mt-1 focus:ring-black focus:border-black block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-3">
            </div>
            <div class="sm:col-span-3">
              <label for="zipCode" class="block text-sm font-medium text-gray-700">ZIP/Postal Code</label>
              <input type="text" name="zipCode" id="zipCode" class="mt-1 focus:ring-black focus:border-black block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-3">
            </div>
            <div class="sm:col-span-3">
              <label for="phone" class="block text-sm font-medium text-gray-700">Phone Number</label>
              <input type="tel" name="phone" id="phone" class="mt-1 focus:ring-black focus:border-black block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-3">
            </div>
            <div class="sm:col-span-6">
              <div class="flex items-center">
                <input id="defaultAddress" name="defaultAddress" type="checkbox" class="focus:ring-black h-4 w-4 text-black border-gray-300 rounded">
                <label for="defaultAddress" class="ml-2 block text-sm text-gray-700">Set as default address</label>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button type="button" onclick="saveAddress()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-black text-base font-medium text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black sm:ml-3 sm:w-auto sm:text-sm">
          Save
        </button>
        <button type="button" onclick="closeAddressModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Mock API functions
  async function fetchUserProfile() {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return {
      id: 12345,
      name: "John Doe",
      username: "johndoe123",
      email: "john.doe@example.com",
      phone: "9876543210",
      profileImage: "https://randomuser.me/api/portraits/men/1.jpg",
      memberSince: "June 2022"
    };
  }

  async function fetchUserAddresses() {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 600));
    
    return [
      {
        id: "addr1",
        fullName: "John Doe",
        addressLine1: "123 Main St, Apt 4B",
        addressLine2: "",
        city: "New York",
        state: "NY",
        zipCode: "10001",
        phone: "9876543210",
        isDefault: true
      },
      {
        id: "addr2",
        fullName: "Jane Smith (Work)",
        addressLine1: "456 Business Ave, Suite 200",
        addressLine2: "",
        city: "Brooklyn",
        state: "NY",
        zipCode: "11201",
        phone: "9876543211",
        isDefault: false
      }
    ];
  }

  async function fetchUserOrders() {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 700));
    
    return [
      {
        id: "ORD-123456",
        date: "May 15, 2023",
        status: "Delivered",
        total: 125.99,
        paymentMethod: "Credit Card",
        tracking: {
          placed: "May 15, 2023 at 10:30 AM",
          processed: "May 16, 2023 at 9:15 AM",
          shipped: "May 17, 2023 at 2:45 PM",
          delivered: "May 19, 2023 at 11:20 AM"
        },
        shippingAddress: {
          fullName: "John Doe",
          addressLine1: "123 Main St, Apt 4B",
          addressLine2: "",
          city: "New York",
          state: "NY",
          zipCode: "10001",
          phone: "9876543210"
        },
        products: [
          {
            id: "prod1",
            name: "Premium T-Shirt",
            variant: "Size M, Blue",
            quantity: 1,
            price: 25.99,
            image: "https://via.placeholder.com/100?text=T-Shirt"
          },
          {
            id: "prod2",
            name: "Designer Jeans",
            variant: "Size 32, Black",
            quantity: 2,
            price: 49.99,
            image: "https://via.placeholder.com/100?text=Jeans"
          }
        ]
      },
      {
        id: "ORD-789012",
        date: "April 22, 2023",
        status: "Delivered",
        total: 89.50,
        paymentMethod: "PayPal",
        tracking: {
          placed: "April 22, 2023 at 2:15 PM",
          processed: "April 23, 2023 at 10:00 AM",
          shipped: "April 24, 2023 at 3:30 PM",
          delivered: "April 26, 2023 at 4:45 PM"
        },
        shippingAddress: {
          fullName: "John Doe",
          addressLine1: "123 Main St, Apt 4B",
          addressLine2: "",
          city: "New York",
          state: "NY",
          zipCode: "10001",
          phone: "9876543210"
        },
        products: [
          {
            id: "prod3",
            name: "Casual Sneakers",
            variant: "Size 10, White",
            quantity: 1,
            price: 89.50,
            image: "https://via.placeholder.com/100?text=Sneakers"
          }
        ]
      }
    ];
  }

  async function updateUserProfile(profileData) {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 800));
    return { success: true, message: "Profile updated successfully!" };
  }

  async function saveUserAddress(addressData) {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 800));
    return { success: true, message: "Address saved successfully!" };
  }

  async function deleteUserAddress(addressId) {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 800));
    return { success: true, message: "Address deleted successfully!" };
  }

  // Initialize the page when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Load user profile data
    loadProfileData();
    
    // Initialize dashboard as active tab
    showTab('dashboard');
    
    // Set up event listeners for modals
    setupModalListeners();
  });

  // Load profile data into the form
  async function loadProfileData() {
    try {
      const user = await fetchUserProfile();
      
      document.getElementById('profileName').textContent = user.name;
      document.getElementById('memberSince').textContent = `Member since ${user.memberSince}`;
      document.getElementById('imagePreview').src = user.profileImage;
      
      // Fill form fields
      document.getElementById('name').value = user.name;
      document.getElementById('username').value = user.username;
      document.getElementById('email').value = user.email;
      document.getElementById('phone').value = user.phone;
    } catch (error) {
      console.error("Failed to load profile data:", error);
      alert("Failed to load profile data. Please try again.");
    }
  }

  // Update profile information
  async function updateProfile() {
    // Get form values
    const name = document.getElementById('name').value;
    const username = document.getElementById('username').value;
    const email = document.getElementById('email').value;
    const phone = document.getElementById('phone').value;
    
    try {
      const response = await updateUserProfile({ name, username, email, phone });
      
      if (response.success) {
        // Update displayed name
        document.getElementById('profileName').textContent = name;
        alert(response.message);
      } else {
        alert("Failed to update profile. Please try again.");
      }
    } catch (error) {
      console.error("Error updating profile:", error);
      alert("An error occurred while updating your profile.");
    }
  }

  // Function to display image preview when uploading new profile picture
  function displayImage(input) {
    const imagePreview = document.getElementById("imagePreview");
    if (input.files && input.files[0]) {
      const reader = new FileReader();
      reader.onload = function(e) {
        imagePreview.src = e.target.result;
      };
      reader.readAsDataURL(input.files[0]);
    }
  }

  // Tab Navigation Functions
  async function showTab(tabName) {
    // Hide all tab contents
    document.getElementById('dashboardContent').classList.add('hidden');
    document.getElementById('ordersContent').classList.add('hidden');
    document.getElementById('addressesContent').classList.add('hidden');
    
    // Remove active state from all tabs
    document.getElementById('dashboardTab').classList.remove('bg-gray-100', 'text-black', 'font-medium');
    document.getElementById('dashboardTab').classList.add('text-gray-700', 'hover:bg-gray-50', 'hover:text-black');
    
    document.getElementById('ordersTab').classList.remove('bg-gray-100', 'text-black', 'font-medium');
    document.getElementById('ordersTab').classList.add('text-gray-700', 'hover:bg-gray-50', 'hover:text-black');
    
    document.getElementById('addressesTab').classList.remove('bg-gray-100', 'text-black', 'font-medium');
    document.getElementById('addressesTab').classList.add('text-gray-700', 'hover:bg-gray-50', 'hover:text-black');
    
    // Show selected tab content and update active state
    document.getElementById(tabName + 'Content').classList.remove('hidden');
    document.getElementById(tabName + 'Tab').classList.add('bg-gray-100', 'text-black', 'font-medium');
    document.getElementById(tabName + 'Tab').classList.remove('text-gray-700', 'hover:bg-gray-50', 'hover:text-black');
    
    // Load data for the selected tab
    if (tabName === 'orders') {
      await loadOrders();
    } else if (tabName === 'addresses') {
      await loadAddresses();
    }
  }

  // Load and display orders
  async function loadOrders() {
    const ordersTableBody = document.getElementById('ordersTableBody');
    ordersTableBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">Loading orders...</td></tr>';
    
    try {
      const orders = await fetchUserOrders();
      
      if (orders.length === 0) {
        ordersTableBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">No orders found.</td></tr>';
        return;
      }
      
      ordersTableBody.innerHTML = '';
      
      orders.forEach(order => {
        const row = document.createElement('tr');
        
        // Determine status color based on order status
        let statusClass = 'bg-gray-100 text-gray-800';
        if (order.status === 'Delivered') {
          statusClass = 'bg-green-100 text-green-800';
        } else if (order.status === 'Processing') {
          statusClass = 'bg-blue-100 text-blue-800';
        } else if (order.status === 'Cancelled') {
          statusClass = 'bg-red-100 text-red-800';
        }
        
        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${order.id}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.date}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">${order.status}</span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${order.total.toFixed(2)}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <button onclick="viewOrder('${order.id}')" class="text-black hover:text-gray-600">View</button>
          </td>
        `;
        
        ordersTableBody.appendChild(row);
      });
    } catch (error) {
      console.error("Failed to load orders:", error);
      ordersTableBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-gray-500">Failed to load orders. Please try again.</td></tr>';
    }
  }

  // View order details (continued)
  async function viewOrder(orderId) {
    try {
      const orders = await fetchUserOrders();
      const order = orders.find(o => o.id === orderId);
      
      if (!order) {
        alert("Order not found");
        return;
      }
      
      // Populate order details in the modal
      document.getElementById('modalOrderId').textContent = order.id;
      document.getElementById('modalOrderDate').textContent = order.date;
      document.getElementById('modalOrderStatus').textContent = order.status;
      document.getElementById('modalPaymentMethod').textContent = order.paymentMethod;
      document.getElementById('modalOrderTotal').textContent = `$${order.total.toFixed(2)}`;
      
      // Update status color
      let statusClass = 'bg-gray-100 text-gray-800';
      if (order.status === 'Delivered') {
        statusClass = 'bg-green-100 text-green-800';
      } else if (order.status === 'Processing') {
        statusClass = 'bg-blue-100 text-blue-800';
      } else if (order.status === 'Cancelled') {
        statusClass = 'bg-red-100 text-red-800';
      }
      document.getElementById('modalOrderStatus').className = `px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}`;
      
      // Populate shipping address
      const shippingAddress = order.shippingAddress;
      document.getElementById('modalShippingAddress').innerHTML = `
        <p>${shippingAddress.fullName}</p>
        <p>${shippingAddress.addressLine1}</p>
        ${shippingAddress.addressLine2 ? `<p>${shippingAddress.addressLine2}</p>` : ''}
        <p>${shippingAddress.city}, ${shippingAddress.state} ${shippingAddress.zipCode}</p>
        <p class="mt-2">Phone: ${shippingAddress.phone}</p>
      `;
      
      // Populate product list
      const productList = document.getElementById('productList');
      productList.innerHTML = '';
      
      order.products.forEach(product => {
        const productElement = document.createElement('div');
        productElement.className = 'flex space-x-4 items-center';
        productElement.innerHTML = `
          <img src="${product.image}" alt="${product.name}" class="h-20 w-20 object-cover rounded">
          <div class="flex-1">
            <p class="font-medium text-gray-900">${product.name}</p>
            <p class="text-sm text-gray-500">${product.variant}</p>
            <div class="flex justify-between mt-1">
              <p class="text-gray-600">Qty: ${product.quantity}</p>
              <p class="font-medium text-gray-900">$${(product.price * product.quantity).toFixed(2)}</p>
            </div>
          </div>
        `;
        productList.appendChild(productElement);
      });
      
      // Populate order tracking
      const orderTracking = document.getElementById('orderTracking');
      orderTracking.innerHTML = '';
      
      // Create tracking elements
      const trackingSteps = [
        { status: 'Order Placed', date: order.tracking.placed, completed: true },
        { status: 'Order Processed', date: order.tracking.processed, completed: order.tracking.processed ? true : false },
        { status: 'Order Shipped', date: order.tracking.shipped, completed: order.tracking.shipped ? true : false },
        { status: 'Order Delivered', date: order.tracking.delivered, completed: order.tracking.delivered ? true : false }
      ];
      
      trackingSteps.forEach((step, index) => {
        const stepElement = document.createElement('div');
        stepElement.className = 'flex items-start';
        
        let statusColor = step.completed ? 'bg-green-500' : 'bg-gray-200';
        
        stepElement.innerHTML = `
          <div class="flex-shrink-0 mt-1">
            <div class="w-6 h-6 flex items-center justify-center ${statusColor} rounded-full">
              ${step.completed ? 
                '<svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>' : 
                ''}
            </div>
            ${index < trackingSteps.length - 1 ? '<div class="h-10 w-px bg-gray-200 mx-auto"></div>' : ''}
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium text-gray-900">${step.status}</p>
            <p class="text-sm text-gray-500">${step.date || 'Pending'}</p>
          </div>
        `;
        
        orderTracking.appendChild(stepElement);
      });
      
      // Show the modal
      document.getElementById('orderModal').classList.remove('hidden');
      document.getElementById('orderModal').classList.add('flex');
    } catch (error) {
      console.error("Failed to load order details:", error);
      alert("Failed to load order details. Please try again.");
    }
  }

  // Setup modal event listeners
  function setupModalListeners() {
    // Order modal close button
    document.getElementById('closeModal').addEventListener('click', function() {
      document.getElementById('orderModal').classList.add('hidden');
      document.getElementById('orderModal').classList.remove('flex');
    });
    
    // Close modal when clicking outside
    document.getElementById('orderModal').addEventListener('click', function(event) {
      if (event.target === this) {
        this.classList.add('hidden');
        this.classList.remove('flex');
      }
    });
  }

  // Load and display addresses
  async function loadAddresses() {
    const addressesContainer = document.getElementById('addressesContainer');
    addressesContainer.innerHTML = '<div class="animate-pulse space-y-4"><div class="h-4 bg-gray-200 rounded w-1/4"></div><div class="h-4 bg-gray-200 rounded"></div><div class="h-4 bg-gray-200 rounded w-3/4"></div><div class="h-4 bg-gray-200 rounded w-2/3"></div></div>';
    
    try {
      const addresses = await fetchUserAddresses();
      
      if (addresses.length === 0) {
        addressesContainer.innerHTML = '<p class="text-center text-gray-500 py-8">No saved addresses found.</p>';
        return;
      }
      
      addressesContainer.innerHTML = '';
      
      addresses.forEach(address => {
        const addressElement = document.createElement('div');
        addressElement.className = 'border border-gray-200 rounded-lg p-4 relative';
        
        // Add default badge if it's the default address
        if (address.isDefault) {
          addressElement.innerHTML = `
            <span class="absolute top-2 right-2 px-2 py-1 bg-black text-white text-xs font-medium rounded">Default</span>
          `;
        }
        
        addressElement.innerHTML += `
          <h4 class="font-medium text-lg">${address.fullName}</h4>
          <p class="text-gray-600 mt-2">${address.addressLine1}</p>
          ${address.addressLine2 ? `<p class="text-gray-600">${address.addressLine2}</p>` : ''}
          <p class="text-gray-600">${address.city}, ${address.state} ${address.zipCode}</p>
          <p class="text-gray-600 mt-1">Phone: ${address.phone}</p>
          
          <div class="flex space-x-4 mt-4 pt-4 border-t border-gray-200">
            <button onclick="editAddress('${address.id}')" class="text-sm font-medium text-gray-700 hover:text-black">Edit</button>
            <button onclick="confirmDeleteAddress('${address.id}')" class="text-sm font-medium text-red-600 hover:text-red-800">Delete</button>
          </div>
        `;
        
        addressesContainer.appendChild(addressElement);
      });
    } catch (error) {
      console.error("Failed to load addresses:", error);
      addressesContainer.innerHTML = '<p class="text-center text-gray-500 py-8">Failed to load addresses. Please try again.</p>';
    }
  }

  // Address Modal Functions
  function openAddressModal(addressId = null) {
    // Reset form
    document.getElementById('addressForm').reset();
    document.getElementById('addressId').value = '';
    
    if (addressId) {
      // Edit mode
      document.getElementById('modalTitle').textContent = 'Edit Address';
      
      // Fetch address data and fill the form
      fetchUserAddresses().then(addresses => {
        const address = addresses.find(a => a.id === addressId);
        if (address) {
          document.getElementById('addressId').value = address.id;
          document.getElementById('fullName').value = address.fullName;
          document.getElementById('addressLine1').value = address.addressLine1;
          document.getElementById('addressLine2').value = address.addressLine2 || '';
          document.getElementById('city').value = address.city;
          document.getElementById('state').value = address.state;
          document.getElementById('zipCode').value = address.zipCode;
          document.getElementById('phone').value = address.phone;
          document.getElementById('defaultAddress').checked = address.isDefault;
        }
      }).catch(error => {
        console.error("Failed to load address details:", error);
        alert("Failed to load address details. Please try again.");
        closeAddressModal();
      });
    } else {
      // Add mode
      document.getElementById('modalTitle').textContent = 'Add New Address';
    }
    
    // Show modal
    document.getElementById('addressModal').classList.remove('hidden');
  }

  function closeAddressModal() {
    document.getElementById('addressModal').classList.add('hidden');
  }

  async function saveAddress() {
    // Get form values
    const addressId = document.getElementById('addressId').value;
    const fullName = document.getElementById('fullName').value;
    const addressLine1 = document.getElementById('addressLine1').value;
    const addressLine2 = document.getElementById('addressLine2').value;
    const city = document.getElementById('city').value;
    const state = document.getElementById('state').value;
    const zipCode = document.getElementById('zipCode').value;
    const phone = document.getElementById('phone').value;
    const isDefault = document.getElementById('defaultAddress').checked;
    
    // Basic validation
    if (!fullName || !addressLine1 || !city || !state || !zipCode) {
      alert("Please fill in all required fields.");
      return;
    }
    
    try {
      const addressData = {
        id: addressId || `addr${Date.now()}`, // Generate ID if new address
        fullName,
        addressLine1,
        addressLine2,
        city,
        state,
        zipCode,
        phone,
        isDefault
      };
      
      const response = await saveUserAddress(addressData);
      
      if (response.success) {
        alert(response.message);
        closeAddressModal();
        loadAddresses(); // Reload addresses
      } else {
        alert("Failed to save address. Please try again.");
      }
    } catch (error) {
      console.error("Error saving address:", error);
      alert("An error occurred while saving your address.");
    }
  }

  function editAddress(addressId) {
    openAddressModal(addressId);
  }

  function confirmDeleteAddress(addressId) {
    if (confirm("Are you sure you want to delete this address?")) {
      deleteAddress(addressId);
    }
  }

  async function deleteAddress(addressId) {
    try {
      const response = await deleteUserAddress(addressId);
      
      if (response.success) {
        alert(response.message);
        loadAddresses(); // Reload addresses
      } else {
        alert("Failed to delete address. Please try again.");
      }
    } catch (error) {
      console.error("Error deleting address:", error);
      alert("An error occurred while deleting your address.");
    }
  }
</script>