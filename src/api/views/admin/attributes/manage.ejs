<div class="mt-10 w-full max-w-lg mx-auto bg-white border border-gray-200 p-8 rounded-2xl shadow-xl">
  <h4 class="font-bold text-3xl mb-6 text-center text-black"><%= attribute ? 'Edit Attribute' : 'Add Attribute' %></h4>

  <form id="attributeForm">
    <% if (attribute) { %>
      <input type="hidden" name="attributeId" value="<%= attribute._id %>">
    <% } %>

    <div class="mb-6">
      <label for="attributeName" class="block text-black text-lg font-semibold mb-2">Attribute Name</label>
      <input type="text"
             id="attributeName"
             name="name"
             value="<%= attribute?.name || '' %>"
             class="w-full px-4 py-3 bg-white border border-gray-300 text-black rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
             required>
    </div>

    <div class="mb-4 flex items-center gap-2">
      <input type="checkbox"
             id="isColor"
             name="isColor"
             value="true"
             class="h-5 w-5 text-black border-black focus:ring-black">
      <label for="isColor" class="text-black text-sm">I'm adding color values (e.g., case color, band color)</label>
    </div>

    <div class="mb-6 relative">
      <label for="attributeValues" class="block text-black text-lg font-semibold mb-2">Attribute Values</label>
      <input type="text"
             id="attributeValues"
             name="values"
             value="<%= attribute?.values?.map(v => v.value).join(', ') || '' %>"
             placeholder="e.g. 4GB, 256GB SSD, NVIDIA GTX 1650"
             class="w-full py-3 pl-14 bg-white border border-gray-300 text-black text-sm placeholder:text-xs rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
             required>
      <input type="color"
             id="colorPicker"
             class="absolute left-3 top-1/2 -translate-y-1/2 w-9 h-9 rounded border-none cursor-pointer hidden"
             value="#000000">
    </div>

    <div class="mb-6">
      <label for="categorySelect" class="block text-black text-lg font-semibold mb-2">Select Category</label>
      <select id="categorySelect"
              name="categoryId"
              class="w-full px-4 py-3 bg-white border border-gray-300 text-black rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
              required>
        <option value="">-- Select Category --</option>
        <% categories.forEach(category => { %>
          <option value="<%= category._id %>" <%= attribute?.categoryId?.toString() === category._id.toString() ? 'selected' : '' %>>
            <%= category.name %>
          </option>
        <% }) %>
      </select>
    </div>

    <button type="submit"
            class="w-full py-3 bg-black text-white font-semibold rounded-lg hover:bg-gray-900 transition focus:outline-none focus:ring-2 focus:ring-black">
      Save Attribute
    </button>
  </form>
</div>

<%- include('../../layouts/partials/toast') %>

<script>
  const isColorCheckbox = document.getElementById("isColor");
  const colorPicker = document.getElementById("colorPicker");
  const attributeValuesInput = document.getElementById("attributeValues");

  isColorCheckbox.addEventListener("change", () => {
    if (isColorCheckbox.checked) {
      colorPicker.classList.remove("hidden");
      colorPicker.value = attributeValuesInput.value || "#000000";
      attributeValuesInput.value = colorPicker.value;
      attributeValuesInput.placeholder = "Pick colors, separate with commas";
    } else {
      colorPicker.classList.add("hidden");
      attributeValuesInput.value = "";
      attributeValuesInput.placeholder = "e.g. 4GB, 256GB SSD, NVIDIA GTX 1650";
    }
  });

  colorPicker.addEventListener("input", () => {
    const currentValues = attributeValuesInput.value.trim();
    if (currentValues) {
      attributeValuesInput.value = currentValues + ', ' + colorPicker.value;
    } else {
      attributeValuesInput.value = colorPicker.value;
    }
  });

  document.getElementById("attributeForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);
    const isEdit = formData.get("attributeId");
    const isColor = isColorCheckbox.checked;
    const rawValue = attributeValuesInput.value;

    formData.delete("values");

    const values = rawValue.split(',').map(v => v.trim()).filter(Boolean);
    values.forEach(v => formData.append("values[]", v));

    try {
      const response = await fetch("/admin/attributes", {
        method: isEdit ? "PUT" : "POST",
        body: formData
      });

      const result = await response.json();

      if (result.success) {
        showToast(result.message, true);
        setTimeout(() => {
          window.location.href = "/admin/attributes";
        }, 2000);
      } else {
        showToast(result.message || "Failed to save", false);
      }
    } catch (error) {
      console.error("Submission error:", error);
      showToast("Something went wrong!", false);
    }
  });

  window.addEventListener("DOMContentLoaded", () => {
    const currentValue = attributeValuesInput.value.trim();
    const isHexColor = /^#[0-9A-Fa-f]{6}$/.test(currentValue);
    if (isHexColor) {
      isColorCheckbox.checked = true;
      colorPicker.classList.remove("hidden");
      colorPicker.value = currentValue;
      attributeValuesInput.placeholder = "Pick colors, separate with commas";
    }
  });
</script>
