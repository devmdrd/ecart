<div class="container mt-5">
  <h3 class="text-2xl font-semibold mb-5">List Customers</h3>

  <div class="overflow-x-auto rounded-lg">
    <table id="example" class="min-w-full text-left table-auto">
      <thead>
        <tr>
          <th class="px-4 py-2 font-medium text-sm">No</th>
          <th class="px-4 py-2 font-medium text-sm">Name</th>
          <th class="px-4 py-2 font-medium text-sm">Email</th>
          <th class="px-4 py-2 font-medium text-sm">Phone</th>
          <th class="px-4 py-2 font-medium text-sm">Status</th>
          <th class="px-4 py-2 font-medium text-sm">Actions</th>
        </tr>
      </thead>
      <tbody>
        <% customers.forEach((customer, index) => { %>
          <tr class="border-b">
            <td class="px-4 py-2"><%= index + 1 %></td>
            <td class="px-4 py-2"><%= customer.name %></td>
            <td class="px-4 py-2"><%= customer.email %></td>
            <td class="px-4 py-2"><%= customer.phone || 'N/A'%></td>
            <td class="px-4 py-2">
              <span class="px-2 py-1 rounded-full text-sm <%= customer.isBlocked ? 'bg-red-200 text-red-800' : 'bg-green-200 text-green-800' %>">
                <%= customer.isBlocked ? 'Inactive' : 'Active' %>
              </span>
            </td>
            <td class="px-4 py-2">
              <div class="flex gap-3 items-center">
                <i 
                  onclick="toggleBlock('<%= customer._id %>', <%= customer.isBlocked %>)"
                  class="fas <%= customer.isBlocked ? 'fa-unlock text-green-600' : 'fa-lock text-red-600' %> cursor-pointer text-xl hover:text-black transition-colors duration-200"
                  title="<%= customer.isBlocked ? 'Unblock' : 'Block' %>"
                ></i>
                <button 
                  class="px-3 py-2 rounded-md border border-gray-300 text-red-600 hover:bg-gray-100 focus:outline-none transition-all duration-200"
                  title="Delete" 
                  onclick="openDeleteModal('<%= customer._id %>')">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </td>                    
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
  <div class="bg-white p-6 rounded-lg w-96">
    <h4 class="text-xl font-semibold mb-4">Confirm Deletion</h4>
    <p>Are you sure you want to delete this customer?</p>
    <div class="mt-4 flex justify-end gap-4">
      <button id="cancelDelete" class="px-4 py-2 bg-gray-300 rounded-md">Cancel</button>
      <button id="confirmDelete" class="px-4 py-2 bg-red-600 text-white rounded-md">Delete</button>
    </div>
  </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="fixed bottom-6 right-6 bg-gray-800 text-white py-3 px-6 rounded-lg shadow-lg opacity-0 transition-opacity duration-500 pointer-events-none"></div>

<script>
  let customerIdToDelete = null;

  // Open delete confirmation modal
  function openDeleteModal(customerId) {
    customerIdToDelete = customerId;
    document.getElementById("deleteModal").classList.remove("hidden");
  }

  // Close delete modal
  document.getElementById("cancelDelete").addEventListener("click", () => {
    document.getElementById("deleteModal").classList.add("hidden");
  });

  // Show Toast Notification
  async function showToast(message, isSuccess = true) {
    const toast = document.getElementById("toast");
    toast.textContent = message;
    toast.classList.remove("opacity-0");
    toast.classList.add("opacity-100");
    toast.classList.add(isSuccess ? "bg-green-600" : "bg-red-600");

    setTimeout(() => {
      toast.classList.remove("opacity-100");
      toast.classList.add("opacity-0");
    }, 2500);
  }

  // Toggle block/unblock customer
  async function toggleBlock(customerId, isBlocked) {
    try {
      const response = await fetch('/admin/customers', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ customerId, isBlocked: !isBlocked })
      });

      const result = await response.json();
      showToast(result.message, result.success);
      if (result.success) {
        location.reload();
      }
    } catch (err) {
      console.error("Failed to toggle block status", err);
      showToast("An error occurred", false);
    }
  }

  // Confirm and delete customer
  document.getElementById("confirmDelete").addEventListener("click", async () => {
    if (customerIdToDelete) {
      try {
        const response = await fetch(`/admin/customers/${customerIdToDelete}`, {
          method: 'DELETE',
        });

        const result = await response.json();
        if (result.success) {
          showToast(result.message, true);
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showToast(result.message, false);
        }
      } catch (error) {
        console.error("Error deleting customer:", error);
        showToast("An error occurred while deleting the customer.", false);
      }
    }
    document.getElementById("deleteModal").classList.add("hidden");
  });
</script>
